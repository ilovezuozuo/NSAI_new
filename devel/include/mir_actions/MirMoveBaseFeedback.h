// Generated by gencpp from file mir_actions/MirMoveBaseFeedback.msg
// DO NOT EDIT!


#ifndef MIR_ACTIONS_MESSAGE_MIRMOVEBASEFEEDBACK_H
#define MIR_ACTIONS_MESSAGE_MIRMOVEBASEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose2D.h>

namespace mir_actions
{
template <class ContainerAllocator>
struct MirMoveBaseFeedback_
{
  typedef MirMoveBaseFeedback_<ContainerAllocator> Type;

  MirMoveBaseFeedback_()
    : state(0)
    , base_position()
    , current_goal()
    , dist_to_goal()
    , pose()
    , marker_inversion(false)  {
    }
  MirMoveBaseFeedback_(const ContainerAllocator& _alloc)
    : state(0)
    , base_position(_alloc)
    , current_goal(_alloc)
    , dist_to_goal(_alloc)
    , pose(_alloc)
    , marker_inversion(false)  {
  (void)_alloc;
    }



   typedef int8_t _state_type;
  _state_type state;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _base_position_type;
  _base_position_type base_position;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _current_goal_type;
  _current_goal_type current_goal;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _dist_to_goal_type;
  _dist_to_goal_type dist_to_goal;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint8_t _marker_inversion_type;
  _marker_inversion_type marker_inversion;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NOT_READY)
  #undef NOT_READY
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(WAITING_FOR_FLEET)
  #undef WAITING_FOR_FLEET
#endif
#if defined(_WIN32) && defined(COLLISION)
  #undef COLLISION
#endif
#if defined(_WIN32) && defined(PLANNING)
  #undef PLANNING
#endif
#if defined(_WIN32) && defined(CONTROLLING)
  #undef CONTROLLING
#endif
#if defined(_WIN32) && defined(CLEARING)
  #undef CLEARING
#endif
#if defined(_WIN32) && defined(DOCKING)
  #undef DOCKING
#endif
#if defined(_WIN32) && defined(MOVING_FORWARD)
  #undef MOVING_FORWARD
#endif
#if defined(_WIN32) && defined(MOVING_BACKWARD)
  #undef MOVING_BACKWARD
#endif

  enum {
    NOT_READY = -1,
    UNKNOWN = -2,
    WAITING_FOR_FLEET = -3,
    COLLISION = -4,
    PLANNING = 0,
    CONTROLLING = 1,
    CLEARING = 2,
    DOCKING = 3,
    MOVING_FORWARD = 10,
    MOVING_BACKWARD = 11,
  };


  typedef boost::shared_ptr< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MirMoveBaseFeedback_

typedef ::mir_actions::MirMoveBaseFeedback_<std::allocator<void> > MirMoveBaseFeedback;

typedef boost::shared_ptr< ::mir_actions::MirMoveBaseFeedback > MirMoveBaseFeedbackPtr;
typedef boost::shared_ptr< ::mir_actions::MirMoveBaseFeedback const> MirMoveBaseFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator1> & lhs, const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.base_position == rhs.base_position &&
    lhs.current_goal == rhs.current_goal &&
    lhs.dist_to_goal == rhs.dist_to_goal &&
    lhs.pose == rhs.pose &&
    lhs.marker_inversion == rhs.marker_inversion;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator1> & lhs, const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_actions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91889a1bfc370b351d55faacdff14e74";
  }

  static const char* value(const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91889a1bfc370b35ULL;
  static const uint64_t static_value2 = 0x1d55faacdff14e74ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_actions/MirMoveBaseFeedback";
  }

  static const char* value(const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"#shared\n"
"int8 NOT_READY = -1\n"
"int8 UNKNOWN = -2\n"
"int8 WAITING_FOR_FLEET = -3\n"
"int8 COLLISION = -4\n"
"\n"
"#global move states\n"
"int8 PLANNING = 0\n"
"int8 CONTROLLING = 1\n"
"int8 CLEARING = 2\n"
"\n"
"#relative move states\n"
"int8 DOCKING = 3\n"
"\n"
"#shared feedback\n"
"int8 state\n"
"\n"
"#global move feedback\n"
"geometry_msgs/PoseStamped base_position\n"
"\n"
"#relative move feedback\n"
"geometry_msgs/PoseStamped current_goal\n"
"geometry_msgs/PoseStamped dist_to_goal\n"
"\n"
"#docking move feedback\n"
"geometry_msgs/Pose2D pose\n"
"bool marker_inversion\n"
"\n"
"#path_types\n"
"    #reverse_trolly\n"
"int8 MOVING_FORWARD = 10\n"
"int8 MOVING_BACKWARD = 11\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.base_position);
      stream.next(m.current_goal);
      stream.next(m.dist_to_goal);
      stream.next(m.pose);
      stream.next(m.marker_inversion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MirMoveBaseFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_actions::MirMoveBaseFeedback_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    s << indent << "base_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.base_position);
    s << indent << "current_goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.current_goal);
    s << indent << "dist_to_goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.dist_to_goal);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "marker_inversion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.marker_inversion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_ACTIONS_MESSAGE_MIRMOVEBASEFEEDBACK_H
