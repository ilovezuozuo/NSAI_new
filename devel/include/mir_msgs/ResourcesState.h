// Generated by gencpp from file mir_msgs/ResourcesState.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_RESOURCESSTATE_H
#define MIR_MSGS_MESSAGE_RESOURCESSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mir_msgs/ResourceState.h>

namespace mir_msgs
{
template <class ContainerAllocator>
struct ResourcesState_
{
  typedef ResourcesState_<ContainerAllocator> Type;

  ResourcesState_()
    : header()
    , resources()
    , token()  {
    }
  ResourcesState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , resources(_alloc)
    , token(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::mir_msgs::ResourceState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mir_msgs::ResourceState_<ContainerAllocator> >> _resources_type;
  _resources_type resources;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _token_type;
  _token_type token;





  typedef boost::shared_ptr< ::mir_msgs::ResourcesState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::ResourcesState_<ContainerAllocator> const> ConstPtr;

}; // struct ResourcesState_

typedef ::mir_msgs::ResourcesState_<std::allocator<void> > ResourcesState;

typedef boost::shared_ptr< ::mir_msgs::ResourcesState > ResourcesStatePtr;
typedef boost::shared_ptr< ::mir_msgs::ResourcesState const> ResourcesStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::ResourcesState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::ResourcesState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::ResourcesState_<ContainerAllocator1> & lhs, const ::mir_msgs::ResourcesState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.resources == rhs.resources &&
    lhs.token == rhs.token;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::ResourcesState_<ContainerAllocator1> & lhs, const ::mir_msgs::ResourcesState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::ResourcesState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::ResourcesState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::ResourcesState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::ResourcesState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::ResourcesState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::ResourcesState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::ResourcesState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "982b0cae95aba9754f19d3a76d996d20";
  }

  static const char* value(const ::mir_msgs::ResourcesState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x982b0cae95aba975ULL;
  static const uint64_t static_value2 = 0x4f19d3a76d996d20ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::ResourcesState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/ResourcesState";
  }

  static const char* value(const ::mir_msgs::ResourcesState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::ResourcesState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"ResourceState[] resources\n"
"string token\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mir_msgs/ResourceState\n"
"string[] assigned # A list of IPs of all assigned robots (Areas can have more than one robot assigned at a time)\n"
"uint32 ROBOT_POSITION=0\n"
"uint32 STAGING_POSITION=1\n"
"uint32 CHARGING_STATION=2\n"
"uint32 AREA=3\n"
"uint32 ELEVATOR_ENTRY_POSITION=26\n"
"uint32 ELEVATOR_POSITION=25\n"
"uint32 type # The resource type\n"
"uint32 path_idx # The index from the global path in which the robot gets into the position\n"
"float32 distance # The distance from the robot to the resource\n"
"geometry_msgs/Point collision_point # The collision point with the resource\n"
"geometry_msgs/Point[] resource_geometry # The resource_geometry\n"
"string[] queue # The queue for a resource. It's a list of robots ips.\n"
"string name # The name of the resource\n"
"string guid # The guid of the resource\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mir_msgs::ResourcesState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::ResourcesState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.resources);
      stream.next(m.token);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResourcesState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::ResourcesState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::ResourcesState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "resources[]" << std::endl;
    for (size_t i = 0; i < v.resources.size(); ++i)
    {
      s << indent << "  resources[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mir_msgs::ResourceState_<ContainerAllocator> >::stream(s, indent + "    ", v.resources[i]);
    }
    s << indent << "token: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.token);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_RESOURCESSTATE_H
