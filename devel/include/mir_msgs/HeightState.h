// Generated by gencpp from file mir_msgs/HeightState.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_HEIGHTSTATE_H
#define MIR_MSGS_MESSAGE_HEIGHTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct HeightState_
{
  typedef HeightState_<ContainerAllocator> Type;

  HeightState_()
    : state(0)  {
    }
  HeightState_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HEIGHT_UNKNOWN)
  #undef HEIGHT_UNKNOWN
#endif
#if defined(_WIN32) && defined(HEIGHT_HOMING)
  #undef HEIGHT_HOMING
#endif
#if defined(_WIN32) && defined(HEIGHT_IDLE)
  #undef HEIGHT_IDLE
#endif
#if defined(_WIN32) && defined(HEIGHT_CHANGING)
  #undef HEIGHT_CHANGING
#endif
#if defined(_WIN32) && defined(HEIGHT_ERROR)
  #undef HEIGHT_ERROR
#endif

  enum {
    HEIGHT_UNKNOWN = 0u,
    HEIGHT_HOMING = 1u,
    HEIGHT_IDLE = 2u,
    HEIGHT_CHANGING = 3u,
    HEIGHT_ERROR = 4u,
  };


  typedef boost::shared_ptr< ::mir_msgs::HeightState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::HeightState_<ContainerAllocator> const> ConstPtr;

}; // struct HeightState_

typedef ::mir_msgs::HeightState_<std::allocator<void> > HeightState;

typedef boost::shared_ptr< ::mir_msgs::HeightState > HeightStatePtr;
typedef boost::shared_ptr< ::mir_msgs::HeightState const> HeightStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::HeightState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::HeightState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::HeightState_<ContainerAllocator1> & lhs, const ::mir_msgs::HeightState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::HeightState_<ContainerAllocator1> & lhs, const ::mir_msgs::HeightState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::HeightState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::HeightState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::HeightState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::HeightState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::HeightState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::HeightState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::HeightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40f05383f94b3ee2b3b2908ab687df73";
  }

  static const char* value(const ::mir_msgs::HeightState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40f05383f94b3ee2ULL;
  static const uint64_t static_value2 = 0xb3b2908ab687df73ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::HeightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/HeightState";
  }

  static const char* value(const ::mir_msgs::HeightState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::HeightState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 HEIGHT_UNKNOWN = 0\n"
"uint8 HEIGHT_HOMING = 1\n"
"uint8 HEIGHT_IDLE = 2\n"
"uint8 HEIGHT_CHANGING = 3\n"
"uint8 HEIGHT_ERROR = 4\n"
"\n"
"uint8 state\n"
;
  }

  static const char* value(const ::mir_msgs::HeightState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::HeightState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeightState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::HeightState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::HeightState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_HEIGHTSTATE_H
