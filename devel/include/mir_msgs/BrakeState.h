// Generated by gencpp from file mir_msgs/BrakeState.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_BRAKESTATE_H
#define MIR_MSGS_MESSAGE_BRAKESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct BrakeState_
{
  typedef BrakeState_<ContainerAllocator> Type;

  BrakeState_()
    : state(0)  {
    }
  BrakeState_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(INITIALIZING)
  #undef INITIALIZING
#endif
#if defined(_WIN32) && defined(HOMING)
  #undef HOMING
#endif
#if defined(_WIN32) && defined(ACTIVE)
  #undef ACTIVE
#endif
#if defined(_WIN32) && defined(INACTIVE)
  #undef INACTIVE
#endif
#if defined(_WIN32) && defined(ACTIVATING)
  #undef ACTIVATING
#endif
#if defined(_WIN32) && defined(DEACTIVATING)
  #undef DEACTIVATING
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif

  enum {
    UNKNOWN = 0u,
    INITIALIZING = 1u,
    HOMING = 2u,
    ACTIVE = 3u,
    INACTIVE = 4u,
    ACTIVATING = 5u,
    DEACTIVATING = 6u,
    ERROR = 7u,
  };


  typedef boost::shared_ptr< ::mir_msgs::BrakeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::BrakeState_<ContainerAllocator> const> ConstPtr;

}; // struct BrakeState_

typedef ::mir_msgs::BrakeState_<std::allocator<void> > BrakeState;

typedef boost::shared_ptr< ::mir_msgs::BrakeState > BrakeStatePtr;
typedef boost::shared_ptr< ::mir_msgs::BrakeState const> BrakeStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::BrakeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::BrakeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::BrakeState_<ContainerAllocator1> & lhs, const ::mir_msgs::BrakeState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::BrakeState_<ContainerAllocator1> & lhs, const ::mir_msgs::BrakeState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::BrakeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::BrakeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::BrakeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::BrakeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::BrakeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::BrakeState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::BrakeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7042fdf31b88badd5bad421150e1d775";
  }

  static const char* value(const ::mir_msgs::BrakeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7042fdf31b88baddULL;
  static const uint64_t static_value2 = 0x5bad421150e1d775ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::BrakeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/BrakeState";
  }

  static const char* value(const ::mir_msgs::BrakeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::BrakeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 UNKNOWN = 0\n"
"uint8 INITIALIZING = 1\n"
"uint8 HOMING = 2\n"
"uint8 ACTIVE = 3\n"
"uint8 INACTIVE = 4\n"
"uint8 ACTIVATING = 5\n"
"uint8 DEACTIVATING = 6\n"
"uint8 ERROR = 7\n"
"\n"
"uint8 state\n"
;
  }

  static const char* value(const ::mir_msgs::BrakeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::BrakeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BrakeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::BrakeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::BrakeState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_BRAKESTATE_H
