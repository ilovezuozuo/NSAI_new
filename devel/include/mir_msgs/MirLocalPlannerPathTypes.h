// Generated by gencpp from file mir_msgs/MirLocalPlannerPathTypes.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_MIRLOCALPLANNERPATHTYPES_H
#define MIR_MSGS_MESSAGE_MIRLOCALPLANNERPATHTYPES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct MirLocalPlannerPathTypes_
{
  typedef MirLocalPlannerPathTypes_<ContainerAllocator> Type;

  MirLocalPlannerPathTypes_()
    : path_type(0)  {
    }
  MirLocalPlannerPathTypes_(const ContainerAllocator& _alloc)
    : path_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _path_type_type;
  _path_type_type path_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(REVERSE_TROLLEY_STANDARD)
  #undef REVERSE_TROLLEY_STANDARD
#endif
#if defined(_WIN32) && defined(REVERSE_TROLLEY_FAST)
  #undef REVERSE_TROLLEY_FAST
#endif
#if defined(_WIN32) && defined(REVERSE_TROLLEY_COMPACT)
  #undef REVERSE_TROLLEY_COMPACT
#endif

  enum {
    REVERSE_TROLLEY_STANDARD = 1u,
    REVERSE_TROLLEY_FAST = 2u,
    REVERSE_TROLLEY_COMPACT = 3u,
  };


  typedef boost::shared_ptr< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> const> ConstPtr;

}; // struct MirLocalPlannerPathTypes_

typedef ::mir_msgs::MirLocalPlannerPathTypes_<std::allocator<void> > MirLocalPlannerPathTypes;

typedef boost::shared_ptr< ::mir_msgs::MirLocalPlannerPathTypes > MirLocalPlannerPathTypesPtr;
typedef boost::shared_ptr< ::mir_msgs::MirLocalPlannerPathTypes const> MirLocalPlannerPathTypesConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator1> & lhs, const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator2> & rhs)
{
  return lhs.path_type == rhs.path_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator1> & lhs, const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8623c1975cf9d124008b41d106f7a6df";
  }

  static const char* value(const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8623c1975cf9d124ULL;
  static const uint64_t static_value2 = 0x008b41d106f7a6dfULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/MirLocalPlannerPathTypes";
  }

  static const char* value(const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 REVERSE_TROLLEY_STANDARD=1\n"
"uint8 REVERSE_TROLLEY_FAST=2\n"
"uint8 REVERSE_TROLLEY_COMPACT=3\n"
"\n"
"\n"
"uint8 path_type\n"
;
  }

  static const char* value(const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MirLocalPlannerPathTypes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::MirLocalPlannerPathTypes_<ContainerAllocator>& v)
  {
    s << indent << "path_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.path_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_MIRLOCALPLANNERPATHTYPES_H
