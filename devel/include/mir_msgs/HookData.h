// Generated by gencpp from file mir_msgs/HookData.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_HOOKDATA_H
#define MIR_MSGS_MESSAGE_HOOKDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mir_msgs/AngleMeasurment.h>

namespace mir_msgs
{
template <class ContainerAllocator>
struct HookData_
{
  typedef HookData_<ContainerAllocator> Type;

  HookData_()
    : angle()
    , height(0.0)
    , length(0.0)
    , brake_state(0)
    , gripper_state(0)
    , height_state(0)  {
    }
  HookData_(const ContainerAllocator& _alloc)
    : angle(_alloc)
    , height(0.0)
    , length(0.0)
    , brake_state(0)
    , gripper_state(0)
    , height_state(0)  {
  (void)_alloc;
    }



   typedef  ::mir_msgs::AngleMeasurment_<ContainerAllocator>  _angle_type;
  _angle_type angle;

   typedef double _height_type;
  _height_type height;

   typedef double _length_type;
  _length_type length;

   typedef uint8_t _brake_state_type;
  _brake_state_type brake_state;

   typedef uint8_t _gripper_state_type;
  _gripper_state_type gripper_state;

   typedef uint8_t _height_state_type;
  _height_state_type height_state;





  typedef boost::shared_ptr< ::mir_msgs::HookData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::HookData_<ContainerAllocator> const> ConstPtr;

}; // struct HookData_

typedef ::mir_msgs::HookData_<std::allocator<void> > HookData;

typedef boost::shared_ptr< ::mir_msgs::HookData > HookDataPtr;
typedef boost::shared_ptr< ::mir_msgs::HookData const> HookDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::HookData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::HookData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::HookData_<ContainerAllocator1> & lhs, const ::mir_msgs::HookData_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.height == rhs.height &&
    lhs.length == rhs.length &&
    lhs.brake_state == rhs.brake_state &&
    lhs.gripper_state == rhs.gripper_state &&
    lhs.height_state == rhs.height_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::HookData_<ContainerAllocator1> & lhs, const ::mir_msgs::HookData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::HookData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::HookData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::HookData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::HookData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::HookData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::HookData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::HookData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ea6712dc44c7a41f6da42b055292240";
  }

  static const char* value(const ::mir_msgs::HookData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ea6712dc44c7a41ULL;
  static const uint64_t static_value2 = 0xf6da42b055292240ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::HookData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/HookData";
  }

  static const char* value(const ::mir_msgs::HookData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::HookData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AngleMeasurment angle\n"
"float64 height\n"
"float64 length\n"
"uint8 brake_state\n"
"uint8 gripper_state\n"
"uint8 height_state\n"
"\n"
"================================================================================\n"
"MSG: mir_msgs/AngleMeasurment\n"
"float64 angle #radians\n"
"time timestamp\n"
;
  }

  static const char* value(const ::mir_msgs::HookData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::HookData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.height);
      stream.next(m.length);
      stream.next(m.brake_state);
      stream.next(m.gripper_state);
      stream.next(m.height_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HookData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::HookData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::HookData_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::mir_msgs::AngleMeasurment_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "brake_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_state);
    s << indent << "gripper_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_state);
    s << indent << "height_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.height_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_HOOKDATA_H
