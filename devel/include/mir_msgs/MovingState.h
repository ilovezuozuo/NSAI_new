// Generated by gencpp from file mir_msgs/MovingState.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_MOVINGSTATE_H
#define MIR_MSGS_MESSAGE_MOVINGSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct MovingState_
{
  typedef MovingState_<ContainerAllocator> Type;

  MovingState_()
    : moving_state(0)  {
    }
  MovingState_(const ContainerAllocator& _alloc)
    : moving_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _moving_state_type;
  _moving_state_type moving_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(MOVING)
  #undef MOVING
#endif
#if defined(_WIN32) && defined(STOPPED)
  #undef STOPPED
#endif
#if defined(_WIN32) && defined(STANDING_STILL)
  #undef STANDING_STILL
#endif

  enum {
    UNKNOWN = 0u,
    MOVING = 1u,
    STOPPED = 2u,
    STANDING_STILL = 3u,
  };


  typedef boost::shared_ptr< ::mir_msgs::MovingState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::MovingState_<ContainerAllocator> const> ConstPtr;

}; // struct MovingState_

typedef ::mir_msgs::MovingState_<std::allocator<void> > MovingState;

typedef boost::shared_ptr< ::mir_msgs::MovingState > MovingStatePtr;
typedef boost::shared_ptr< ::mir_msgs::MovingState const> MovingStateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::MovingState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::MovingState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::MovingState_<ContainerAllocator1> & lhs, const ::mir_msgs::MovingState_<ContainerAllocator2> & rhs)
{
  return lhs.moving_state == rhs.moving_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::MovingState_<ContainerAllocator1> & lhs, const ::mir_msgs::MovingState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::MovingState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::MovingState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::MovingState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::MovingState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::MovingState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::MovingState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::MovingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "639d77af43d34fd858063576e3ed66eb";
  }

  static const char* value(const ::mir_msgs::MovingState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x639d77af43d34fd8ULL;
  static const uint64_t static_value2 = 0x58063576e3ed66ebULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::MovingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/MovingState";
  }

  static const char* value(const ::mir_msgs::MovingState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::MovingState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 UNKNOWN=0\n"
"uint8 MOVING=1\n"
"uint8 STOPPED=2\n"
"uint8 STANDING_STILL=3\n"
"\n"
"uint8 moving_state	# Current robot moving state\n"
;
  }

  static const char* value(const ::mir_msgs::MovingState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::MovingState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.moving_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovingState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::MovingState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::MovingState_<ContainerAllocator>& v)
  {
    s << indent << "moving_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_MOVINGSTATE_H
