// Generated by gencpp from file mir_msgs/WorldMap.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_WORLDMAP_H
#define MIR_MSGS_MESSAGE_WORLDMAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mir_msgs/ResourcesState.h>
#include <mir_msgs/ResourcesState.h>
#include <mir_msgs/ExternalRobots.h>

namespace mir_msgs
{
template <class ContainerAllocator>
struct WorldMap_
{
  typedef WorldMap_<ContainerAllocator> Type;

  WorldMap_()
    : positions()
    , areas()
    , robots()
    , map_id(0)  {
    }
  WorldMap_(const ContainerAllocator& _alloc)
    : positions(_alloc)
    , areas(_alloc)
    , robots(_alloc)
    , map_id(0)  {
  (void)_alloc;
    }



   typedef  ::mir_msgs::ResourcesState_<ContainerAllocator>  _positions_type;
  _positions_type positions;

   typedef  ::mir_msgs::ResourcesState_<ContainerAllocator>  _areas_type;
  _areas_type areas;

   typedef  ::mir_msgs::ExternalRobots_<ContainerAllocator>  _robots_type;
  _robots_type robots;

   typedef int32_t _map_id_type;
  _map_id_type map_id;





  typedef boost::shared_ptr< ::mir_msgs::WorldMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::WorldMap_<ContainerAllocator> const> ConstPtr;

}; // struct WorldMap_

typedef ::mir_msgs::WorldMap_<std::allocator<void> > WorldMap;

typedef boost::shared_ptr< ::mir_msgs::WorldMap > WorldMapPtr;
typedef boost::shared_ptr< ::mir_msgs::WorldMap const> WorldMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::WorldMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::WorldMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::WorldMap_<ContainerAllocator1> & lhs, const ::mir_msgs::WorldMap_<ContainerAllocator2> & rhs)
{
  return lhs.positions == rhs.positions &&
    lhs.areas == rhs.areas &&
    lhs.robots == rhs.robots &&
    lhs.map_id == rhs.map_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::WorldMap_<ContainerAllocator1> & lhs, const ::mir_msgs::WorldMap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::WorldMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::WorldMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::WorldMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::WorldMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::WorldMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::WorldMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::WorldMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec0a9f4a5448b3a8ef606ac88d5ab93a";
  }

  static const char* value(const ::mir_msgs::WorldMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec0a9f4a5448b3a8ULL;
  static const uint64_t static_value2 = 0xef606ac88d5ab93aULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::WorldMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/WorldMap";
  }

  static const char* value(const ::mir_msgs::WorldMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::WorldMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/ResourcesState positions\n"
"mir_msgs/ResourcesState areas\n"
"mir_msgs/ExternalRobots robots\n"
"int32 map_id\n"
"\n"
"================================================================================\n"
"MSG: mir_msgs/ResourcesState\n"
"Header header\n"
"ResourceState[] resources\n"
"string token\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mir_msgs/ResourceState\n"
"string[] assigned # A list of IPs of all assigned robots (Areas can have more than one robot assigned at a time)\n"
"uint32 ROBOT_POSITION=0\n"
"uint32 STAGING_POSITION=1\n"
"uint32 CHARGING_STATION=2\n"
"uint32 AREA=3\n"
"uint32 ELEVATOR_ENTRY_POSITION=26\n"
"uint32 ELEVATOR_POSITION=25\n"
"uint32 type # The resource type\n"
"uint32 path_idx # The index from the global path in which the robot gets into the position\n"
"float32 distance # The distance from the robot to the resource\n"
"geometry_msgs/Point collision_point # The collision point with the resource\n"
"geometry_msgs/Point[] resource_geometry # The resource_geometry\n"
"string[] queue # The queue for a resource. It's a list of robots ips.\n"
"string name # The name of the resource\n"
"string guid # The guid of the resource\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: mir_msgs/ExternalRobots\n"
"Header header\n"
"mir_msgs/ExternalRobot[] robots\n"
"\n"
"================================================================================\n"
"MSG: mir_msgs/ExternalRobot\n"
"Header header\n"
"uint32 id\n"
"uint32 MIR100=1\n"
"uint32 MIR500=3\n"
"uint32 type_id\n"
"string name\n"
"float64 robot_length\n"
"float64 robot_width\n"
"string footprint\n"
"string ip\n"
"uint32 map_id\n"
"int32 priority\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Pose extrapolated_pose\n"
"geometry_msgs/Twist twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mir_msgs::WorldMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::WorldMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.positions);
      stream.next(m.areas);
      stream.next(m.robots);
      stream.next(m.map_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::WorldMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::WorldMap_<ContainerAllocator>& v)
  {
    s << indent << "positions: ";
    s << std::endl;
    Printer< ::mir_msgs::ResourcesState_<ContainerAllocator> >::stream(s, indent + "  ", v.positions);
    s << indent << "areas: ";
    s << std::endl;
    Printer< ::mir_msgs::ResourcesState_<ContainerAllocator> >::stream(s, indent + "  ", v.areas);
    s << indent << "robots: ";
    s << std::endl;
    Printer< ::mir_msgs::ExternalRobots_<ContainerAllocator> >::stream(s, indent + "  ", v.robots);
    s << indent << "map_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_WORLDMAP_H
