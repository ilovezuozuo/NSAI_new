// Generated by gencpp from file mir_msgs/SoundEvent.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_SOUNDEVENT_H
#define MIR_MSGS_MESSAGE_SOUNDEVENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct SoundEvent_
{
  typedef SoundEvent_<ContainerAllocator> Type;

  SoundEvent_()
    : time_stamp()
    , sound_guid()
    , message()
    , event(0)  {
    }
  SoundEvent_(const ContainerAllocator& _alloc)
    : time_stamp()
    , sound_guid(_alloc)
    , message(_alloc)
    , event(0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sound_guid_type;
  _sound_guid_type sound_guid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef uint8_t _event_type;
  _event_type event;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(MUTE)
  #undef MUTE
#endif
#if defined(_WIN32) && defined(UNMUTE)
  #undef UNMUTE
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(UNPAUSE)
  #undef UNPAUSE
#endif
#if defined(_WIN32) && defined(FINISH)
  #undef FINISH
#endif
#if defined(_WIN32) && defined(MUTEABLE)
  #undef MUTEABLE
#endif
#if defined(_WIN32) && defined(REQ_PLAY)
  #undef REQ_PLAY
#endif

  enum {
    START = 0u,
    STOP = 1u,
    MUTE = 2u,
    UNMUTE = 3u,
    PAUSE = 4u,
    UNPAUSE = 5u,
    FINISH = 6u,
    MUTEABLE = 7u,
    REQ_PLAY = 10u,
  };


  typedef boost::shared_ptr< ::mir_msgs::SoundEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::SoundEvent_<ContainerAllocator> const> ConstPtr;

}; // struct SoundEvent_

typedef ::mir_msgs::SoundEvent_<std::allocator<void> > SoundEvent;

typedef boost::shared_ptr< ::mir_msgs::SoundEvent > SoundEventPtr;
typedef boost::shared_ptr< ::mir_msgs::SoundEvent const> SoundEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::SoundEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::SoundEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::SoundEvent_<ContainerAllocator1> & lhs, const ::mir_msgs::SoundEvent_<ContainerAllocator2> & rhs)
{
  return lhs.time_stamp == rhs.time_stamp &&
    lhs.sound_guid == rhs.sound_guid &&
    lhs.message == rhs.message &&
    lhs.event == rhs.event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::SoundEvent_<ContainerAllocator1> & lhs, const ::mir_msgs::SoundEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::SoundEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::SoundEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::SoundEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::SoundEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::SoundEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::SoundEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::SoundEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0a96432de1b262a2bc4de3c5e358086";
  }

  static const char* value(const ::mir_msgs::SoundEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0a96432de1b262aULL;
  static const uint64_t static_value2 = 0x2bc4de3c5e358086ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::SoundEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/SoundEvent";
  }

  static const char* value(const ::mir_msgs::SoundEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::SoundEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time time_stamp\n"
"string sound_guid\n"
"string message\n"
"\n"
"uint8 START=0\n"
"uint8 STOP =1\n"
"uint8 MUTE=2\n"
"uint8 UNMUTE=3\n"
"uint8 PAUSE=4\n"
"uint8 UNPAUSE=5\n"
"uint8 FINISH=6\n"
"uint8 MUTEABLE=7\n"
"uint8 REQ_PLAY=10\n"
"\n"
"\n"
"uint8 event\n"
;
  }

  static const char* value(const ::mir_msgs::SoundEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::SoundEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.sound_guid);
      stream.next(m.message);
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoundEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::SoundEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::SoundEvent_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "sound_guid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sound_guid);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_SOUNDEVENT_H
