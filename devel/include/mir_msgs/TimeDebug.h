// Generated by gencpp from file mir_msgs/TimeDebug.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_TIMEDEBUG_H
#define MIR_MSGS_MESSAGE_TIMEDEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct TimeDebug_
{
  typedef TimeDebug_<ContainerAllocator> Type;

  TimeDebug_()
    : description()
    , time_elapsed()  {
    }
  TimeDebug_(const ContainerAllocator& _alloc)
    : description(_alloc)
    , time_elapsed(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _description_type;
  _description_type description;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _time_elapsed_type;
  _time_elapsed_type time_elapsed;





  typedef boost::shared_ptr< ::mir_msgs::TimeDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::TimeDebug_<ContainerAllocator> const> ConstPtr;

}; // struct TimeDebug_

typedef ::mir_msgs::TimeDebug_<std::allocator<void> > TimeDebug;

typedef boost::shared_ptr< ::mir_msgs::TimeDebug > TimeDebugPtr;
typedef boost::shared_ptr< ::mir_msgs::TimeDebug const> TimeDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::TimeDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::TimeDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::TimeDebug_<ContainerAllocator1> & lhs, const ::mir_msgs::TimeDebug_<ContainerAllocator2> & rhs)
{
  return lhs.description == rhs.description &&
    lhs.time_elapsed == rhs.time_elapsed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::TimeDebug_<ContainerAllocator1> & lhs, const ::mir_msgs::TimeDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::TimeDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::TimeDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::TimeDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::TimeDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::TimeDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::TimeDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::TimeDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28aa4a0605ad62536b39104e60b07150";
  }

  static const char* value(const ::mir_msgs::TimeDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28aa4a0605ad6253ULL;
  static const uint64_t static_value2 = 0x6b39104e60b07150ULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::TimeDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/TimeDebug";
  }

  static const char* value(const ::mir_msgs::TimeDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::TimeDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] description\n"
"float64[] time_elapsed\n"
;
  }

  static const char* value(const ::mir_msgs::TimeDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::TimeDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.description);
      stream.next(m.time_elapsed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::TimeDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::TimeDebug_<ContainerAllocator>& v)
  {
    s << indent << "description[]" << std::endl;
    for (size_t i = 0; i < v.description.size(); ++i)
    {
      s << indent << "  description[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description[i]);
    }
    s << indent << "time_elapsed[]" << std::endl;
    for (size_t i = 0; i < v.time_elapsed.size(); ++i)
    {
      s << indent << "  time_elapsed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.time_elapsed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_TIMEDEBUG_H
