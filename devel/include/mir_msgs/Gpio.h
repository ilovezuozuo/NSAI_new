// Generated by gencpp from file mir_msgs/Gpio.msg
// DO NOT EDIT!


#ifndef MIR_MSGS_MESSAGE_GPIO_H
#define MIR_MSGS_MESSAGE_GPIO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mir_msgs
{
template <class ContainerAllocator>
struct Gpio_
{
  typedef Gpio_<ContainerAllocator> Type;

  Gpio_()
    : ioport(0)
    , dat(0)  {
    }
  Gpio_(const ContainerAllocator& _alloc)
    : ioport(0)
    , dat(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ioport_type;
  _ioport_type ioport;

   typedef uint8_t _dat_type;
  _dat_type dat;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POWERBOARD_GPIO)
  #undef POWERBOARD_GPIO
#endif
#if defined(_WIN32) && defined(POWERBOARD_RESET_SWITCH_LED)
  #undef POWERBOARD_RESET_SWITCH_LED
#endif
#if defined(_WIN32) && defined(PENDANT_INPUT)
  #undef PENDANT_INPUT
#endif
#if defined(_WIN32) && defined(AUTO_MODE_SWITCH)
  #undef AUTO_MODE_SWITCH
#endif
#if defined(_WIN32) && defined(MANUAL_MODE_SWITCH)
  #undef MANUAL_MODE_SWITCH
#endif
#if defined(_WIN32) && defined(STOP_BUTTON)
  #undef STOP_BUTTON
#endif

  enum {
    POWERBOARD_GPIO = 0u,
    POWERBOARD_RESET_SWITCH_LED = 1u,
    PENDANT_INPUT = 5u,
    AUTO_MODE_SWITCH = 10u,
    MANUAL_MODE_SWITCH = 11u,
    STOP_BUTTON = 12u,
  };


  typedef boost::shared_ptr< ::mir_msgs::Gpio_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mir_msgs::Gpio_<ContainerAllocator> const> ConstPtr;

}; // struct Gpio_

typedef ::mir_msgs::Gpio_<std::allocator<void> > Gpio;

typedef boost::shared_ptr< ::mir_msgs::Gpio > GpioPtr;
typedef boost::shared_ptr< ::mir_msgs::Gpio const> GpioConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mir_msgs::Gpio_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mir_msgs::Gpio_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mir_msgs::Gpio_<ContainerAllocator1> & lhs, const ::mir_msgs::Gpio_<ContainerAllocator2> & rhs)
{
  return lhs.ioport == rhs.ioport &&
    lhs.dat == rhs.dat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mir_msgs::Gpio_<ContainerAllocator1> & lhs, const ::mir_msgs::Gpio_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mir_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::Gpio_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mir_msgs::Gpio_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::Gpio_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mir_msgs::Gpio_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::Gpio_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mir_msgs::Gpio_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mir_msgs::Gpio_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b7a8c383a0e3a06e5aaaef6159b20ec";
  }

  static const char* value(const ::mir_msgs::Gpio_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b7a8c383a0e3a06ULL;
  static const uint64_t static_value2 = 0xe5aaaef6159b20ecULL;
};

template<class ContainerAllocator>
struct DataType< ::mir_msgs::Gpio_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mir_msgs/Gpio";
  }

  static const char* value(const ::mir_msgs::Gpio_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mir_msgs::Gpio_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 POWERBOARD_GPIO = 0\n"
"uint8 POWERBOARD_RESET_SWITCH_LED = 1\n"
"uint8 PENDANT_INPUT = 5\n"
"uint8 AUTO_MODE_SWITCH = 10\n"
"uint8 MANUAL_MODE_SWITCH = 11\n"
"uint8 STOP_BUTTON = 12\n"
"\n"
"uint8 ioport\n"
"uint8 dat\n"
;
  }

  static const char* value(const ::mir_msgs::Gpio_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mir_msgs::Gpio_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ioport);
      stream.next(m.dat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gpio_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mir_msgs::Gpio_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mir_msgs::Gpio_<ContainerAllocator>& v)
  {
    s << indent << "ioport: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ioport);
    s << indent << "dat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIR_MSGS_MESSAGE_GPIO_H
