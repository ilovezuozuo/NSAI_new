# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_actions/MirMoveBaseResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class MirMoveBaseResult(genpy.Message):
  _md5sum = "e54c1567292aca96a9941233d552b908"
  _type = "mir_actions/MirMoveBaseResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition

#shared states
int16 UNDEFINED = 0
int16 GOAL_REACHED = 1
int16 FAILED = -1

#global move states
int16 MARKER_VISIBLE = 2
int16 FAILED_NO_PATH = -2
int16 FAILED_GOAL_IN_STATIC_OBSTACLE = -3
int16 FAILED_GOAL_IN_FORBIDDEN_AREA = -4
int16 FAILED_GOAL_IN_DYNAMIC_OBSTACLE = -5
int16 FAILED_ROBOT_IN_COLLISION = -6
int16 FAILED_ROBOT_IN_FORBIDDEN_AREA = -7
int16 FAILED_UNKNOWN_TRAILER = -8
int16 FAILED_TO_PASS_GLOBAL_PLAN = -9
int16 FAILED_NO_VALID_RECOVERY_CONTROL = -10
int16 FAILED_UNKNOWN_PLANNER_ERROR = -11
int16 FAILED_ROBOT_OSCILLATING = -12
int16 FAILED_SOFTWARE_ERROR = -13

#relative move states
int16 FAILED_TIMEOUT = -14
int16 FAILED_COLLISION = -15
int16 INVALID_GOAL = -16

#docking move states
int16 FAILED_MARKER_TRACKING_ERROR = -17

#shared results
int16 end_state
geometry_msgs/PoseStamped end_pose

#docking results
geometry_msgs/Pose2D pose

#feedback for UI
string message


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  # Pseudo-constants
  UNDEFINED = 0
  GOAL_REACHED = 1
  FAILED = -1
  MARKER_VISIBLE = 2
  FAILED_NO_PATH = -2
  FAILED_GOAL_IN_STATIC_OBSTACLE = -3
  FAILED_GOAL_IN_FORBIDDEN_AREA = -4
  FAILED_GOAL_IN_DYNAMIC_OBSTACLE = -5
  FAILED_ROBOT_IN_COLLISION = -6
  FAILED_ROBOT_IN_FORBIDDEN_AREA = -7
  FAILED_UNKNOWN_TRAILER = -8
  FAILED_TO_PASS_GLOBAL_PLAN = -9
  FAILED_NO_VALID_RECOVERY_CONTROL = -10
  FAILED_UNKNOWN_PLANNER_ERROR = -11
  FAILED_ROBOT_OSCILLATING = -12
  FAILED_SOFTWARE_ERROR = -13
  FAILED_TIMEOUT = -14
  FAILED_COLLISION = -15
  INVALID_GOAL = -16
  FAILED_MARKER_TRACKING_ERROR = -17

  __slots__ = ['end_state','end_pose','pose','message']
  _slot_types = ['int16','geometry_msgs/PoseStamped','geometry_msgs/Pose2D','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       end_state,end_pose,pose,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MirMoveBaseResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.end_state is None:
        self.end_state = 0
      if self.end_pose is None:
        self.end_pose = geometry_msgs.msg.PoseStamped()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose2D()
      if self.message is None:
        self.message = ''
    else:
      self.end_state = 0
      self.end_pose = geometry_msgs.msg.PoseStamped()
      self.pose = geometry_msgs.msg.Pose2D()
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h3I().pack(_x.end_state, _x.end_pose.header.seq, _x.end_pose.header.stamp.secs, _x.end_pose.header.stamp.nsecs))
      _x = self.end_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10d().pack(_x.end_pose.pose.position.x, _x.end_pose.pose.position.y, _x.end_pose.pose.position.z, _x.end_pose.pose.orientation.x, _x.end_pose.pose.orientation.y, _x.end_pose.pose.orientation.z, _x.end_pose.pose.orientation.w, _x.pose.x, _x.pose.y, _x.pose.theta))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.end_pose is None:
        self.end_pose = geometry_msgs.msg.PoseStamped()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.end_state, _x.end_pose.header.seq, _x.end_pose.header.stamp.secs, _x.end_pose.header.stamp.nsecs,) = _get_struct_h3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.end_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.end_pose.pose.position.x, _x.end_pose.pose.position.y, _x.end_pose.pose.position.z, _x.end_pose.pose.orientation.x, _x.end_pose.pose.orientation.y, _x.end_pose.pose.orientation.z, _x.end_pose.pose.orientation.w, _x.pose.x, _x.pose.y, _x.pose.theta,) = _get_struct_10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h3I().pack(_x.end_state, _x.end_pose.header.seq, _x.end_pose.header.stamp.secs, _x.end_pose.header.stamp.nsecs))
      _x = self.end_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10d().pack(_x.end_pose.pose.position.x, _x.end_pose.pose.position.y, _x.end_pose.pose.position.z, _x.end_pose.pose.orientation.x, _x.end_pose.pose.orientation.y, _x.end_pose.pose.orientation.z, _x.end_pose.pose.orientation.w, _x.pose.x, _x.pose.y, _x.pose.theta))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.end_pose is None:
        self.end_pose = geometry_msgs.msg.PoseStamped()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.end_state, _x.end_pose.header.seq, _x.end_pose.header.stamp.secs, _x.end_pose.header.stamp.nsecs,) = _get_struct_h3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.end_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.end_pose.pose.position.x, _x.end_pose.pose.position.y, _x.end_pose.pose.position.z, _x.end_pose.pose.orientation.x, _x.end_pose.pose.orientation.y, _x.end_pose.pose.orientation.z, _x.end_pose.pose.orientation.w, _x.pose.x, _x.pose.y, _x.pose.theta,) = _get_struct_10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
_struct_h3I = None
def _get_struct_h3I():
    global _struct_h3I
    if _struct_h3I is None:
        _struct_h3I = struct.Struct("<h3I")
    return _struct_h3I
