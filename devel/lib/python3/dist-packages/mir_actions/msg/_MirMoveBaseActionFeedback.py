# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_actions/MirMoveBaseActionFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import geometry_msgs.msg
import mir_actions.msg
import std_msgs.msg

class MirMoveBaseActionFeedback(genpy.Message):
  _md5sum = "0fc99ae551a2aa911fb5f6f57d3fd3ce"
  _type = "mir_actions/MirMoveBaseActionFeedback"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MirMoveBaseFeedback feedback

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: mir_actions/MirMoveBaseFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
#shared
int8 NOT_READY = -1
int8 UNKNOWN = -2
int8 WAITING_FOR_FLEET = -3
int8 COLLISION = -4

#global move states
int8 PLANNING = 0
int8 CONTROLLING = 1
int8 CLEARING = 2

#relative move states
int8 DOCKING = 3

#shared feedback
int8 state

#global move feedback
geometry_msgs/PoseStamped base_position

#relative move feedback
geometry_msgs/PoseStamped current_goal
geometry_msgs/PoseStamped dist_to_goal

#docking move feedback
geometry_msgs/Pose2D pose
bool marker_inversion

#path_types
    #reverse_trolly
int8 MOVING_FORWARD = 10
int8 MOVING_BACKWARD = 11


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  __slots__ = ['header','status','feedback']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalStatus','mir_actions/MirMoveBaseFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MirMoveBaseActionFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.feedback is None:
        self.feedback = mir_actions.msg.MirMoveBaseFeedback()
    else:
      self.header = std_msgs.msg.Header()
      self.status = actionlib_msgs.msg.GoalStatus()
      self.feedback = mir_actions.msg.MirMoveBaseFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b3I().pack(_x.feedback.state, _x.feedback.base_position.header.seq, _x.feedback.base_position.header.stamp.secs, _x.feedback.base_position.header.stamp.nsecs))
      _x = self.feedback.base_position.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.feedback.base_position.pose.position.x, _x.feedback.base_position.pose.position.y, _x.feedback.base_position.pose.position.z, _x.feedback.base_position.pose.orientation.x, _x.feedback.base_position.pose.orientation.y, _x.feedback.base_position.pose.orientation.z, _x.feedback.base_position.pose.orientation.w, _x.feedback.current_goal.header.seq, _x.feedback.current_goal.header.stamp.secs, _x.feedback.current_goal.header.stamp.nsecs))
      _x = self.feedback.current_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.feedback.current_goal.pose.position.x, _x.feedback.current_goal.pose.position.y, _x.feedback.current_goal.pose.position.z, _x.feedback.current_goal.pose.orientation.x, _x.feedback.current_goal.pose.orientation.y, _x.feedback.current_goal.pose.orientation.z, _x.feedback.current_goal.pose.orientation.w, _x.feedback.dist_to_goal.header.seq, _x.feedback.dist_to_goal.header.stamp.secs, _x.feedback.dist_to_goal.header.stamp.nsecs))
      _x = self.feedback.dist_to_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10dB().pack(_x.feedback.dist_to_goal.pose.position.x, _x.feedback.dist_to_goal.pose.position.y, _x.feedback.dist_to_goal.pose.position.z, _x.feedback.dist_to_goal.pose.orientation.x, _x.feedback.dist_to_goal.pose.orientation.y, _x.feedback.dist_to_goal.pose.orientation.z, _x.feedback.dist_to_goal.pose.orientation.w, _x.feedback.pose.x, _x.feedback.pose.y, _x.feedback.pose.theta, _x.feedback.marker_inversion))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.feedback is None:
        self.feedback = mir_actions.msg.MirMoveBaseFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.text = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.feedback.state, _x.feedback.base_position.header.seq, _x.feedback.base_position.header.stamp.secs, _x.feedback.base_position.header.stamp.nsecs,) = _get_struct_b3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feedback.base_position.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.feedback.base_position.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.feedback.base_position.pose.position.x, _x.feedback.base_position.pose.position.y, _x.feedback.base_position.pose.position.z, _x.feedback.base_position.pose.orientation.x, _x.feedback.base_position.pose.orientation.y, _x.feedback.base_position.pose.orientation.z, _x.feedback.base_position.pose.orientation.w, _x.feedback.current_goal.header.seq, _x.feedback.current_goal.header.stamp.secs, _x.feedback.current_goal.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feedback.current_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.feedback.current_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.feedback.current_goal.pose.position.x, _x.feedback.current_goal.pose.position.y, _x.feedback.current_goal.pose.position.z, _x.feedback.current_goal.pose.orientation.x, _x.feedback.current_goal.pose.orientation.y, _x.feedback.current_goal.pose.orientation.z, _x.feedback.current_goal.pose.orientation.w, _x.feedback.dist_to_goal.header.seq, _x.feedback.dist_to_goal.header.stamp.secs, _x.feedback.dist_to_goal.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feedback.dist_to_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.feedback.dist_to_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 81
      (_x.feedback.dist_to_goal.pose.position.x, _x.feedback.dist_to_goal.pose.position.y, _x.feedback.dist_to_goal.pose.position.z, _x.feedback.dist_to_goal.pose.orientation.x, _x.feedback.dist_to_goal.pose.orientation.y, _x.feedback.dist_to_goal.pose.orientation.z, _x.feedback.dist_to_goal.pose.orientation.w, _x.feedback.pose.x, _x.feedback.pose.y, _x.feedback.pose.theta, _x.feedback.marker_inversion,) = _get_struct_10dB().unpack(str[start:end])
      self.feedback.marker_inversion = bool(self.feedback.marker_inversion)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b3I().pack(_x.feedback.state, _x.feedback.base_position.header.seq, _x.feedback.base_position.header.stamp.secs, _x.feedback.base_position.header.stamp.nsecs))
      _x = self.feedback.base_position.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.feedback.base_position.pose.position.x, _x.feedback.base_position.pose.position.y, _x.feedback.base_position.pose.position.z, _x.feedback.base_position.pose.orientation.x, _x.feedback.base_position.pose.orientation.y, _x.feedback.base_position.pose.orientation.z, _x.feedback.base_position.pose.orientation.w, _x.feedback.current_goal.header.seq, _x.feedback.current_goal.header.stamp.secs, _x.feedback.current_goal.header.stamp.nsecs))
      _x = self.feedback.current_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.feedback.current_goal.pose.position.x, _x.feedback.current_goal.pose.position.y, _x.feedback.current_goal.pose.position.z, _x.feedback.current_goal.pose.orientation.x, _x.feedback.current_goal.pose.orientation.y, _x.feedback.current_goal.pose.orientation.z, _x.feedback.current_goal.pose.orientation.w, _x.feedback.dist_to_goal.header.seq, _x.feedback.dist_to_goal.header.stamp.secs, _x.feedback.dist_to_goal.header.stamp.nsecs))
      _x = self.feedback.dist_to_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10dB().pack(_x.feedback.dist_to_goal.pose.position.x, _x.feedback.dist_to_goal.pose.position.y, _x.feedback.dist_to_goal.pose.position.z, _x.feedback.dist_to_goal.pose.orientation.x, _x.feedback.dist_to_goal.pose.orientation.y, _x.feedback.dist_to_goal.pose.orientation.z, _x.feedback.dist_to_goal.pose.orientation.w, _x.feedback.pose.x, _x.feedback.pose.y, _x.feedback.pose.theta, _x.feedback.marker_inversion))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.feedback is None:
        self.feedback = mir_actions.msg.MirMoveBaseFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.text = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.feedback.state, _x.feedback.base_position.header.seq, _x.feedback.base_position.header.stamp.secs, _x.feedback.base_position.header.stamp.nsecs,) = _get_struct_b3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feedback.base_position.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.feedback.base_position.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.feedback.base_position.pose.position.x, _x.feedback.base_position.pose.position.y, _x.feedback.base_position.pose.position.z, _x.feedback.base_position.pose.orientation.x, _x.feedback.base_position.pose.orientation.y, _x.feedback.base_position.pose.orientation.z, _x.feedback.base_position.pose.orientation.w, _x.feedback.current_goal.header.seq, _x.feedback.current_goal.header.stamp.secs, _x.feedback.current_goal.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feedback.current_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.feedback.current_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.feedback.current_goal.pose.position.x, _x.feedback.current_goal.pose.position.y, _x.feedback.current_goal.pose.position.z, _x.feedback.current_goal.pose.orientation.x, _x.feedback.current_goal.pose.orientation.y, _x.feedback.current_goal.pose.orientation.z, _x.feedback.current_goal.pose.orientation.w, _x.feedback.dist_to_goal.header.seq, _x.feedback.dist_to_goal.header.stamp.secs, _x.feedback.dist_to_goal.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feedback.dist_to_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.feedback.dist_to_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 81
      (_x.feedback.dist_to_goal.pose.position.x, _x.feedback.dist_to_goal.pose.position.y, _x.feedback.dist_to_goal.pose.position.z, _x.feedback.dist_to_goal.pose.orientation.x, _x.feedback.dist_to_goal.pose.orientation.y, _x.feedback.dist_to_goal.pose.orientation.z, _x.feedback.dist_to_goal.pose.orientation.w, _x.feedback.pose.x, _x.feedback.pose.y, _x.feedback.pose.theta, _x.feedback.marker_inversion,) = _get_struct_10dB().unpack(str[start:end])
      self.feedback.marker_inversion = bool(self.feedback.marker_inversion)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10dB = None
def _get_struct_10dB():
    global _struct_10dB
    if _struct_10dB is None:
        _struct_10dB = struct.Struct("<10dB")
    return _struct_10dB
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b3I = None
def _get_struct_b3I():
    global _struct_b3I
    if _struct_b3I is None:
        _struct_b3I = struct.Struct("<b3I")
    return _struct_b3I
