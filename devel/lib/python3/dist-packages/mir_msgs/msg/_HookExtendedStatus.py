# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/HookExtendedStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mir_msgs.msg

class HookExtendedStatus(genpy.Message):
  _md5sum = "7a4c65a73248ad57ddff2231bb564f0d"
  _type = "mir_msgs/HookExtendedStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool available

BrakeState brake

GripperState gripper

HeightState height

float32 angle

string qr_marker_name

================================================================================
MSG: mir_msgs/BrakeState
uint8 UNKNOWN = 0
uint8 INITIALIZING = 1
uint8 HOMING = 2
uint8 ACTIVE = 3
uint8 INACTIVE = 4
uint8 ACTIVATING = 5
uint8 DEACTIVATING = 6
uint8 ERROR = 7

uint8 state

================================================================================
MSG: mir_msgs/GripperState
uint8 LOCK_UNKNOWN = 0
uint8 LOCK_HOMING = 1
uint8 LOCK_OPEN = 2
uint8 LOCK_OPENING = 3
uint8 LOCK_CLOSED = 4
uint8 LOCK_CLOSING = 6
uint8 LOCK_ERROR = 9

uint8 state

================================================================================
MSG: mir_msgs/HeightState
uint8 HEIGHT_UNKNOWN = 0
uint8 HEIGHT_HOMING = 1
uint8 HEIGHT_IDLE = 2
uint8 HEIGHT_CHANGING = 3
uint8 HEIGHT_ERROR = 4

uint8 state
"""
  __slots__ = ['available','brake','gripper','height','angle','qr_marker_name']
  _slot_types = ['bool','mir_msgs/BrakeState','mir_msgs/GripperState','mir_msgs/HeightState','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       available,brake,gripper,height,angle,qr_marker_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HookExtendedStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.available is None:
        self.available = False
      if self.brake is None:
        self.brake = mir_msgs.msg.BrakeState()
      if self.gripper is None:
        self.gripper = mir_msgs.msg.GripperState()
      if self.height is None:
        self.height = mir_msgs.msg.HeightState()
      if self.angle is None:
        self.angle = 0.
      if self.qr_marker_name is None:
        self.qr_marker_name = ''
    else:
      self.available = False
      self.brake = mir_msgs.msg.BrakeState()
      self.gripper = mir_msgs.msg.GripperState()
      self.height = mir_msgs.msg.HeightState()
      self.angle = 0.
      self.qr_marker_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4Bf().pack(_x.available, _x.brake.state, _x.gripper.state, _x.height.state, _x.angle))
      _x = self.qr_marker_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.brake is None:
        self.brake = mir_msgs.msg.BrakeState()
      if self.gripper is None:
        self.gripper = mir_msgs.msg.GripperState()
      if self.height is None:
        self.height = mir_msgs.msg.HeightState()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.available, _x.brake.state, _x.gripper.state, _x.height.state, _x.angle,) = _get_struct_4Bf().unpack(str[start:end])
      self.available = bool(self.available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.qr_marker_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.qr_marker_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4Bf().pack(_x.available, _x.brake.state, _x.gripper.state, _x.height.state, _x.angle))
      _x = self.qr_marker_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.brake is None:
        self.brake = mir_msgs.msg.BrakeState()
      if self.gripper is None:
        self.gripper = mir_msgs.msg.GripperState()
      if self.height is None:
        self.height = mir_msgs.msg.HeightState()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.available, _x.brake.state, _x.gripper.state, _x.height.state, _x.angle,) = _get_struct_4Bf().unpack(str[start:end])
      self.available = bool(self.available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.qr_marker_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.qr_marker_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4Bf = None
def _get_struct_4Bf():
    global _struct_4Bf
    if _struct_4Bf is None:
        _struct_4Bf = struct.Struct("<4Bf")
    return _struct_4Bf
