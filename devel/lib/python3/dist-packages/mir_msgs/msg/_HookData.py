# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/HookData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import mir_msgs.msg

class HookData(genpy.Message):
  _md5sum = "6ea6712dc44c7a41f6da42b055292240"
  _type = "mir_msgs/HookData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """AngleMeasurment angle
float64 height
float64 length
uint8 brake_state
uint8 gripper_state
uint8 height_state

================================================================================
MSG: mir_msgs/AngleMeasurment
float64 angle #radians
time timestamp
"""
  __slots__ = ['angle','height','length','brake_state','gripper_state','height_state']
  _slot_types = ['mir_msgs/AngleMeasurment','float64','float64','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       angle,height,length,brake_state,gripper_state,height_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HookData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.angle is None:
        self.angle = mir_msgs.msg.AngleMeasurment()
      if self.height is None:
        self.height = 0.
      if self.length is None:
        self.length = 0.
      if self.brake_state is None:
        self.brake_state = 0
      if self.gripper_state is None:
        self.gripper_state = 0
      if self.height_state is None:
        self.height_state = 0
    else:
      self.angle = mir_msgs.msg.AngleMeasurment()
      self.height = 0.
      self.length = 0.
      self.brake_state = 0
      self.gripper_state = 0
      self.height_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d2I2d3B().pack(_x.angle.angle, _x.angle.timestamp.secs, _x.angle.timestamp.nsecs, _x.height, _x.length, _x.brake_state, _x.gripper_state, _x.height_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.angle is None:
        self.angle = mir_msgs.msg.AngleMeasurment()
      end = 0
      _x = self
      start = end
      end += 35
      (_x.angle.angle, _x.angle.timestamp.secs, _x.angle.timestamp.nsecs, _x.height, _x.length, _x.brake_state, _x.gripper_state, _x.height_state,) = _get_struct_d2I2d3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d2I2d3B().pack(_x.angle.angle, _x.angle.timestamp.secs, _x.angle.timestamp.nsecs, _x.height, _x.length, _x.brake_state, _x.gripper_state, _x.height_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.angle is None:
        self.angle = mir_msgs.msg.AngleMeasurment()
      end = 0
      _x = self
      start = end
      end += 35
      (_x.angle.angle, _x.angle.timestamp.secs, _x.angle.timestamp.nsecs, _x.height, _x.length, _x.brake_state, _x.gripper_state, _x.height_state,) = _get_struct_d2I2d3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d2I2d3B = None
def _get_struct_d2I2d3B():
    global _struct_d2I2d3B
    if _struct_d2I2d3B is None:
        _struct_d2I2d3B = struct.Struct("<d2I2d3B")
    return _struct_d2I2d3B
