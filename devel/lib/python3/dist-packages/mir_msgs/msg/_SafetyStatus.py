# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mir_msgs/SafetyStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SafetyStatus(genpy.Message):
  _md5sum = "f5cb6a913e2b7e074185c459a63c7796"
  _type = "mir_msgs/SafetyStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_connected

bool is_firmware_ok
int32 firmware_version

bool in_protective_stop
bool in_emergency_stop
bool sto_feedback
bool is_restart_required

bool is_safety_muted
float64 max_lin_speed
float64 max_rot_speed

# Defines for filling out the mute_mask
uint8 MUTE_FRONT_RIGHT  = 1
uint8 MUTE_FRONT_CENTER = 2
uint8 MUTE_FRONT_LEFT   = 4
uint8 MUTE_LEFT_CENTER  = 8
uint8 MUTE_REAR_LEFT    = 16
uint8 MUTE_REAR_CENTER  = 32
uint8 MUTE_REAR_RIGHT   = 64
uint8 MUTE_RIGHT_CENTER = 128

uint8 MUTE_FRONT        = 7
uint8 MUTE_LEFT         = 28
uint8 MUTE_REAR         = 112
uint8 MUTE_RIGHT        = 193
uint8 MUTE_SIDES        = 221
uint8 MUTE_ALL          = 255

uint8 mute_mask
uint8 partial_mute_mask

bool is_limited_speed_active
bool is_lifter_down
bool in_sleep_mode

bool in_manual_mode
bool is_manual_mode_restart_required
"""
  # Pseudo-constants
  MUTE_FRONT_RIGHT = 1
  MUTE_FRONT_CENTER = 2
  MUTE_FRONT_LEFT = 4
  MUTE_LEFT_CENTER = 8
  MUTE_REAR_LEFT = 16
  MUTE_REAR_CENTER = 32
  MUTE_REAR_RIGHT = 64
  MUTE_RIGHT_CENTER = 128
  MUTE_FRONT = 7
  MUTE_LEFT = 28
  MUTE_REAR = 112
  MUTE_RIGHT = 193
  MUTE_SIDES = 221
  MUTE_ALL = 255

  __slots__ = ['is_connected','is_firmware_ok','firmware_version','in_protective_stop','in_emergency_stop','sto_feedback','is_restart_required','is_safety_muted','max_lin_speed','max_rot_speed','mute_mask','partial_mute_mask','is_limited_speed_active','is_lifter_down','in_sleep_mode','in_manual_mode','is_manual_mode_restart_required']
  _slot_types = ['bool','bool','int32','bool','bool','bool','bool','bool','float64','float64','uint8','uint8','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_connected,is_firmware_ok,firmware_version,in_protective_stop,in_emergency_stop,sto_feedback,is_restart_required,is_safety_muted,max_lin_speed,max_rot_speed,mute_mask,partial_mute_mask,is_limited_speed_active,is_lifter_down,in_sleep_mode,in_manual_mode,is_manual_mode_restart_required

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_connected is None:
        self.is_connected = False
      if self.is_firmware_ok is None:
        self.is_firmware_ok = False
      if self.firmware_version is None:
        self.firmware_version = 0
      if self.in_protective_stop is None:
        self.in_protective_stop = False
      if self.in_emergency_stop is None:
        self.in_emergency_stop = False
      if self.sto_feedback is None:
        self.sto_feedback = False
      if self.is_restart_required is None:
        self.is_restart_required = False
      if self.is_safety_muted is None:
        self.is_safety_muted = False
      if self.max_lin_speed is None:
        self.max_lin_speed = 0.
      if self.max_rot_speed is None:
        self.max_rot_speed = 0.
      if self.mute_mask is None:
        self.mute_mask = 0
      if self.partial_mute_mask is None:
        self.partial_mute_mask = 0
      if self.is_limited_speed_active is None:
        self.is_limited_speed_active = False
      if self.is_lifter_down is None:
        self.is_lifter_down = False
      if self.in_sleep_mode is None:
        self.in_sleep_mode = False
      if self.in_manual_mode is None:
        self.in_manual_mode = False
      if self.is_manual_mode_restart_required is None:
        self.is_manual_mode_restart_required = False
    else:
      self.is_connected = False
      self.is_firmware_ok = False
      self.firmware_version = 0
      self.in_protective_stop = False
      self.in_emergency_stop = False
      self.sto_feedback = False
      self.is_restart_required = False
      self.is_safety_muted = False
      self.max_lin_speed = 0.
      self.max_rot_speed = 0.
      self.mute_mask = 0
      self.partial_mute_mask = 0
      self.is_limited_speed_active = False
      self.is_lifter_down = False
      self.in_sleep_mode = False
      self.in_manual_mode = False
      self.is_manual_mode_restart_required = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bi5B2d7B().pack(_x.is_connected, _x.is_firmware_ok, _x.firmware_version, _x.in_protective_stop, _x.in_emergency_stop, _x.sto_feedback, _x.is_restart_required, _x.is_safety_muted, _x.max_lin_speed, _x.max_rot_speed, _x.mute_mask, _x.partial_mute_mask, _x.is_limited_speed_active, _x.is_lifter_down, _x.in_sleep_mode, _x.in_manual_mode, _x.is_manual_mode_restart_required))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.is_connected, _x.is_firmware_ok, _x.firmware_version, _x.in_protective_stop, _x.in_emergency_stop, _x.sto_feedback, _x.is_restart_required, _x.is_safety_muted, _x.max_lin_speed, _x.max_rot_speed, _x.mute_mask, _x.partial_mute_mask, _x.is_limited_speed_active, _x.is_lifter_down, _x.in_sleep_mode, _x.in_manual_mode, _x.is_manual_mode_restart_required,) = _get_struct_2Bi5B2d7B().unpack(str[start:end])
      self.is_connected = bool(self.is_connected)
      self.is_firmware_ok = bool(self.is_firmware_ok)
      self.in_protective_stop = bool(self.in_protective_stop)
      self.in_emergency_stop = bool(self.in_emergency_stop)
      self.sto_feedback = bool(self.sto_feedback)
      self.is_restart_required = bool(self.is_restart_required)
      self.is_safety_muted = bool(self.is_safety_muted)
      self.is_limited_speed_active = bool(self.is_limited_speed_active)
      self.is_lifter_down = bool(self.is_lifter_down)
      self.in_sleep_mode = bool(self.in_sleep_mode)
      self.in_manual_mode = bool(self.in_manual_mode)
      self.is_manual_mode_restart_required = bool(self.is_manual_mode_restart_required)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bi5B2d7B().pack(_x.is_connected, _x.is_firmware_ok, _x.firmware_version, _x.in_protective_stop, _x.in_emergency_stop, _x.sto_feedback, _x.is_restart_required, _x.is_safety_muted, _x.max_lin_speed, _x.max_rot_speed, _x.mute_mask, _x.partial_mute_mask, _x.is_limited_speed_active, _x.is_lifter_down, _x.in_sleep_mode, _x.in_manual_mode, _x.is_manual_mode_restart_required))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.is_connected, _x.is_firmware_ok, _x.firmware_version, _x.in_protective_stop, _x.in_emergency_stop, _x.sto_feedback, _x.is_restart_required, _x.is_safety_muted, _x.max_lin_speed, _x.max_rot_speed, _x.mute_mask, _x.partial_mute_mask, _x.is_limited_speed_active, _x.is_lifter_down, _x.in_sleep_mode, _x.in_manual_mode, _x.is_manual_mode_restart_required,) = _get_struct_2Bi5B2d7B().unpack(str[start:end])
      self.is_connected = bool(self.is_connected)
      self.is_firmware_ok = bool(self.is_firmware_ok)
      self.in_protective_stop = bool(self.in_protective_stop)
      self.in_emergency_stop = bool(self.in_emergency_stop)
      self.sto_feedback = bool(self.sto_feedback)
      self.is_restart_required = bool(self.is_restart_required)
      self.is_safety_muted = bool(self.is_safety_muted)
      self.is_limited_speed_active = bool(self.is_limited_speed_active)
      self.is_lifter_down = bool(self.is_lifter_down)
      self.in_sleep_mode = bool(self.in_sleep_mode)
      self.in_manual_mode = bool(self.in_manual_mode)
      self.is_manual_mode_restart_required = bool(self.is_manual_mode_restart_required)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bi5B2d7B = None
def _get_struct_2Bi5B2d7B():
    global _struct_2Bi5B2d7B
    if _struct_2Bi5B2d7B is None:
        _struct_2Bi5B2d7B = struct.Struct("<2Bi5B2d7B")
    return _struct_2Bi5B2d7B
