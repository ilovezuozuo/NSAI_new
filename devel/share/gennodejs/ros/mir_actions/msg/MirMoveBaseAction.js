// Auto-generated. Do not edit!

// (in-package mir_actions.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let MirMoveBaseActionGoal = require('./MirMoveBaseActionGoal.js');
let MirMoveBaseActionResult = require('./MirMoveBaseActionResult.js');
let MirMoveBaseActionFeedback = require('./MirMoveBaseActionFeedback.js');

//-----------------------------------------------------------

class MirMoveBaseAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new MirMoveBaseActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new MirMoveBaseActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new MirMoveBaseActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MirMoveBaseAction
    // Serialize message field [action_goal]
    bufferOffset = MirMoveBaseActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = MirMoveBaseActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = MirMoveBaseActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MirMoveBaseAction
    let len;
    let data = new MirMoveBaseAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = MirMoveBaseActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = MirMoveBaseActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = MirMoveBaseActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += MirMoveBaseActionGoal.getMessageSize(object.action_goal);
    length += MirMoveBaseActionResult.getMessageSize(object.action_result);
    length += MirMoveBaseActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'mir_actions/MirMoveBaseAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '0ed52f96e28b63ff15853a6b2114fe93';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    MirMoveBaseActionGoal action_goal
    MirMoveBaseActionResult action_result
    MirMoveBaseActionFeedback action_feedback
    
    ================================================================================
    MSG: mir_actions/MirMoveBaseActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    MirMoveBaseGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: mir_actions/MirMoveBaseGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    #move type
    int16 BASE_MOVE = 0
    int16 GLOBAL_MOVE = 1
    int16 RELATIVE_MOVE = 2
    int16 RELATIVE_MARKER_MOVE = 3
    int16 DOCKING_MOVE = 4
    int16 DOCKING_GLOBAL_MOVE = 5
    int16 PATH_TYPE = 6
    int16 move_task
    
    #shared parameters
    geometry_msgs/PoseStamped target_pose
    string target_guid
    
    #global move parameters
    float64 goal_dist_threshold
    float64 goal_orientation_threshold
    nav_msgs/Path path
    float32 max_plan_time
    bool clear_costmaps
    bool pause_command
    bool continue_command
    
    #relative move parameters
    float64 yaw
    bool collision_detection
    bool collision_avoidance
    float64 disable_collision_check_dist
    float64 max_linear_speed
    float64 max_rotational_speed
    float64 pid_dist_offset
    float64 target_offset
    bool only_collision_detection
    float64 timeout
    
    #docking move parameters
    int32 pattern_type
    int32 pattern_value
    bool only_track
    bool same_goal
    string pose_frame
    geometry_msgs/Pose2D pose
    geometry_msgs/Pose2D offset
    float64 bar_length
    float64 bar_distance
    float64 shelf_leg_asymmetry_x
    float64 tolerance
    
    #Path type
    mir_msgs/MirLocalPlannerPathTypes path_type
    geometry_msgs/PoseStamped start_pose
    # float64 timeout
    
    
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: nav_msgs/Path
    #An array of poses that represents a Path for a robot to follow
    Header header
    geometry_msgs/PoseStamped[] poses
    
    ================================================================================
    MSG: geometry_msgs/Pose2D
    # Deprecated
    # Please use the full 3D pose.
    
    # In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.
    
    # If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.
    
    
    # This expresses a position and orientation on a 2D manifold.
    
    float64 x
    float64 y
    float64 theta
    
    ================================================================================
    MSG: mir_msgs/MirLocalPlannerPathTypes
    uint8 REVERSE_TROLLEY_STANDARD=1
    uint8 REVERSE_TROLLEY_FAST=2
    uint8 REVERSE_TROLLEY_COMPACT=3
    
    
    uint8 path_type
    
    ================================================================================
    MSG: mir_actions/MirMoveBaseActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    MirMoveBaseResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: mir_actions/MirMoveBaseResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result definition
    
    #shared states
    int16 UNDEFINED = 0
    int16 GOAL_REACHED = 1
    int16 FAILED = -1
    
    #global move states
    int16 MARKER_VISIBLE = 2
    int16 FAILED_NO_PATH = -2
    int16 FAILED_GOAL_IN_STATIC_OBSTACLE = -3
    int16 FAILED_GOAL_IN_FORBIDDEN_AREA = -4
    int16 FAILED_GOAL_IN_DYNAMIC_OBSTACLE = -5
    int16 FAILED_ROBOT_IN_COLLISION = -6
    int16 FAILED_ROBOT_IN_FORBIDDEN_AREA = -7
    int16 FAILED_UNKNOWN_TRAILER = -8
    int16 FAILED_TO_PASS_GLOBAL_PLAN = -9
    int16 FAILED_NO_VALID_RECOVERY_CONTROL = -10
    int16 FAILED_UNKNOWN_PLANNER_ERROR = -11
    int16 FAILED_ROBOT_OSCILLATING = -12
    int16 FAILED_SOFTWARE_ERROR = -13
    
    #relative move states
    int16 FAILED_TIMEOUT = -14
    int16 FAILED_COLLISION = -15
    int16 INVALID_GOAL = -16
    
    #docking move states
    int16 FAILED_MARKER_TRACKING_ERROR = -17
    
    #shared results
    int16 end_state
    geometry_msgs/PoseStamped end_pose
    
    #docking results
    geometry_msgs/Pose2D pose
    
    #feedback for UI
    string message
    
    
    ================================================================================
    MSG: mir_actions/MirMoveBaseActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    MirMoveBaseFeedback feedback
    
    ================================================================================
    MSG: mir_actions/MirMoveBaseFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #feedback
    #shared
    int8 NOT_READY = -1
    int8 UNKNOWN = -2
    int8 WAITING_FOR_FLEET = -3
    int8 COLLISION = -4
    
    #global move states
    int8 PLANNING = 0
    int8 CONTROLLING = 1
    int8 CLEARING = 2
    
    #relative move states
    int8 DOCKING = 3
    
    #shared feedback
    int8 state
    
    #global move feedback
    geometry_msgs/PoseStamped base_position
    
    #relative move feedback
    geometry_msgs/PoseStamped current_goal
    geometry_msgs/PoseStamped dist_to_goal
    
    #docking move feedback
    geometry_msgs/Pose2D pose
    bool marker_inversion
    
    #path_types
        #reverse_trolly
    int8 MOVING_FORWARD = 10
    int8 MOVING_BACKWARD = 11
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MirMoveBaseAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = MirMoveBaseActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new MirMoveBaseActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = MirMoveBaseActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new MirMoveBaseActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = MirMoveBaseActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new MirMoveBaseActionFeedback()
    }

    return resolved;
    }
};

module.exports = MirMoveBaseAction;
