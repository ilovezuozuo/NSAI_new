// Auto-generated. Do not edit!

// (in-package mir_actions.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class MirMoveBaseResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.end_state = null;
      this.end_pose = null;
      this.pose = null;
      this.message = null;
    }
    else {
      if (initObj.hasOwnProperty('end_state')) {
        this.end_state = initObj.end_state
      }
      else {
        this.end_state = 0;
      }
      if (initObj.hasOwnProperty('end_pose')) {
        this.end_pose = initObj.end_pose
      }
      else {
        this.end_pose = new geometry_msgs.msg.PoseStamped();
      }
      if (initObj.hasOwnProperty('pose')) {
        this.pose = initObj.pose
      }
      else {
        this.pose = new geometry_msgs.msg.Pose2D();
      }
      if (initObj.hasOwnProperty('message')) {
        this.message = initObj.message
      }
      else {
        this.message = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MirMoveBaseResult
    // Serialize message field [end_state]
    bufferOffset = _serializer.int16(obj.end_state, buffer, bufferOffset);
    // Serialize message field [end_pose]
    bufferOffset = geometry_msgs.msg.PoseStamped.serialize(obj.end_pose, buffer, bufferOffset);
    // Serialize message field [pose]
    bufferOffset = geometry_msgs.msg.Pose2D.serialize(obj.pose, buffer, bufferOffset);
    // Serialize message field [message]
    bufferOffset = _serializer.string(obj.message, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MirMoveBaseResult
    let len;
    let data = new MirMoveBaseResult(null);
    // Deserialize message field [end_state]
    data.end_state = _deserializer.int16(buffer, bufferOffset);
    // Deserialize message field [end_pose]
    data.end_pose = geometry_msgs.msg.PoseStamped.deserialize(buffer, bufferOffset);
    // Deserialize message field [pose]
    data.pose = geometry_msgs.msg.Pose2D.deserialize(buffer, bufferOffset);
    // Deserialize message field [message]
    data.message = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += geometry_msgs.msg.PoseStamped.getMessageSize(object.end_pose);
    length += _getByteLength(object.message);
    return length + 30;
  }

  static datatype() {
    // Returns string type for a message object
    return 'mir_actions/MirMoveBaseResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'e54c1567292aca96a9941233d552b908';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result definition
    
    #shared states
    int16 UNDEFINED = 0
    int16 GOAL_REACHED = 1
    int16 FAILED = -1
    
    #global move states
    int16 MARKER_VISIBLE = 2
    int16 FAILED_NO_PATH = -2
    int16 FAILED_GOAL_IN_STATIC_OBSTACLE = -3
    int16 FAILED_GOAL_IN_FORBIDDEN_AREA = -4
    int16 FAILED_GOAL_IN_DYNAMIC_OBSTACLE = -5
    int16 FAILED_ROBOT_IN_COLLISION = -6
    int16 FAILED_ROBOT_IN_FORBIDDEN_AREA = -7
    int16 FAILED_UNKNOWN_TRAILER = -8
    int16 FAILED_TO_PASS_GLOBAL_PLAN = -9
    int16 FAILED_NO_VALID_RECOVERY_CONTROL = -10
    int16 FAILED_UNKNOWN_PLANNER_ERROR = -11
    int16 FAILED_ROBOT_OSCILLATING = -12
    int16 FAILED_SOFTWARE_ERROR = -13
    
    #relative move states
    int16 FAILED_TIMEOUT = -14
    int16 FAILED_COLLISION = -15
    int16 INVALID_GOAL = -16
    
    #docking move states
    int16 FAILED_MARKER_TRACKING_ERROR = -17
    
    #shared results
    int16 end_state
    geometry_msgs/PoseStamped end_pose
    
    #docking results
    geometry_msgs/Pose2D pose
    
    #feedback for UI
    string message
    
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: geometry_msgs/Pose2D
    # Deprecated
    # Please use the full 3D pose.
    
    # In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.
    
    # If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.
    
    
    # This expresses a position and orientation on a 2D manifold.
    
    float64 x
    float64 y
    float64 theta
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MirMoveBaseResult(null);
    if (msg.end_state !== undefined) {
      resolved.end_state = msg.end_state;
    }
    else {
      resolved.end_state = 0
    }

    if (msg.end_pose !== undefined) {
      resolved.end_pose = geometry_msgs.msg.PoseStamped.Resolve(msg.end_pose)
    }
    else {
      resolved.end_pose = new geometry_msgs.msg.PoseStamped()
    }

    if (msg.pose !== undefined) {
      resolved.pose = geometry_msgs.msg.Pose2D.Resolve(msg.pose)
    }
    else {
      resolved.pose = new geometry_msgs.msg.Pose2D()
    }

    if (msg.message !== undefined) {
      resolved.message = msg.message;
    }
    else {
      resolved.message = ''
    }

    return resolved;
    }
};

// Constants for message
MirMoveBaseResult.Constants = {
  UNDEFINED: 0,
  GOAL_REACHED: 1,
  FAILED: -1,
  MARKER_VISIBLE: 2,
  FAILED_NO_PATH: -2,
  FAILED_GOAL_IN_STATIC_OBSTACLE: -3,
  FAILED_GOAL_IN_FORBIDDEN_AREA: -4,
  FAILED_GOAL_IN_DYNAMIC_OBSTACLE: -5,
  FAILED_ROBOT_IN_COLLISION: -6,
  FAILED_ROBOT_IN_FORBIDDEN_AREA: -7,
  FAILED_UNKNOWN_TRAILER: -8,
  FAILED_TO_PASS_GLOBAL_PLAN: -9,
  FAILED_NO_VALID_RECOVERY_CONTROL: -10,
  FAILED_UNKNOWN_PLANNER_ERROR: -11,
  FAILED_ROBOT_OSCILLATING: -12,
  FAILED_SOFTWARE_ERROR: -13,
  FAILED_TIMEOUT: -14,
  FAILED_COLLISION: -15,
  INVALID_GOAL: -16,
  FAILED_MARKER_TRACKING_ERROR: -17,
}

module.exports = MirMoveBaseResult;
